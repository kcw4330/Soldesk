---
Parameters:
  ProjectName:
    Type: String
  VpcCIdrBlock:
    Type: String

Resources:
# Create a VPC & Internet Gateway
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 172.17.0.0/16
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-vpc"

  Igw:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-igw"

  IgwAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref Igw
      VpcId: !Ref Vpc

# Public Subnet & Route Table
  PubSn1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      AvailabilityZone: ap-southeast-2a
      CidrBlock: 172.17.1.0/24
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-pub-sn1"

  PubSn2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      AvailabilityZone: ap-southeast-2c
      CidrBlock: 172.17.2.0/24
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-pub-sn2"

  PubRt12:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-pub-rt12"

  PubRt12Sn1Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PubRt12
      SubnetId: !Ref PubSn1

  PubRt12Sn2Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PubRt12
      SubnetId: !Ref PubSn2

  PubRt12DefaultRoute:
    Type: AWS::EC2::Route
    DependsOn: IgwAttachment
    Properties:
      RouteTableId: !Ref PubRt12
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref Igw

# Private Subnet & Route Table
  PriSn3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      AvailabilityZone: ap-southeast-2a
      CidrBlock: 172.17.3.0/24
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-pri-sn3"

  PriSn4:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      AvailabilityZone: ap-southeast-2c
      CidrBlock: 172.17.4.0/24
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-pri-sn4"

  PriRt34:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-pri-rt34"

  PriRt34Sn3Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PriRt34
      SubnetId: !Ref PriSn3

  PriRt34Sn4Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PriRt34
      SubnetId: !Ref PriSn4

  PriRt34DefaultRoute:
    Type: AWS::EC2::Route
    DependsOn: NatGateway
    Properties:
      RouteTableId: !Ref PriRt34
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

# NAT Gateway & EIP
  NatGatewayEip:
    Type: AWS::EC2::EIP
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-eip-nat"

  NatGateway:
    Type: AWS::EC2::NatGateway
    DependsOn: NatGatewayEip
    Properties:
      AllocationId: !GetAtt NatGatewayEip.AllocationId
      SubnetId: !Ref PubSn1
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-nat-gw"

#172.16.2.100/32 name -sg-web ami-04812dc75505ecaa7 
# Web Server 1 & Web Server 2
  WebEc2Sg:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow SSH
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 172.16.2.100/32
        - IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          CidrIp: 172.16.0.0/15
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      Tags:
        - Key : Name
          Value : !Sub "${ProjectName}-sg-web"

  Web1:
    Type: AWS::EC2::Instance
    DependsOn: PriRt34DefaultRoute
    Properties:
      ImageId: ami-04812dc75505ecaa7
      InstanceType: t2.micro
      NetworkInterfaces: 
        - AssociatePublicIpAddress: false
          PrivateIPAddress: 172.17.3.100
          DeviceIndex: 0
          GroupSet: 
            - !Ref WebEc2Sg
          SubnetId: !Ref PriSn3
      UserData:
        Fn::Base64: |
          #!/bin/bash
          echo "p@ssw0rd" | passwd --stdin root
          sed -i "s/^#PermitRootLogin yes/PermitRootLogin yes/g" /etc/ssh/sshd_config
          sed -i "s/^PasswordAuthentication no/PasswordAuthentication yes/g" /etc/ssh/sshd_config
          systemctl restart sshd
          yum install -y httpd
          systemctl start httpd
          systemctl enable httpd
          echo "<h1>Sydney Web Server 1</h1>" > /var/www/html/index.html
      Tags:
        - Key : Name
          Value : !Sub "${ProjectName}-ec2-web1"


  Web2:
    Type: AWS::EC2::Instance
    DependsOn: PriRt34DefaultRoute
    Properties:
      ImageId: ami-04812dc75505ecaa7
      InstanceType: t2.micro
      NetworkInterfaces: 
        - AssociatePublicIpAddress: false
          PrivateIPAddress: 172.17.4.100
          DeviceIndex: 0
          GroupSet: 
            - !Ref WebEc2Sg
          SubnetId: !Ref PriSn4
      UserData:
        Fn::Base64: |
          #!/bin/bash
          echo "p@ssw0rd" | passwd --stdin root
          sed -i "s/^#PermitRootLogin yes/PermitRootLogin yes/g" /etc/ssh/sshd_config
          sed -i "s/^PasswordAuthentication no/PasswordAuthentication yes/g" /etc/ssh/sshd_config
          systemctl restart sshd
          yum install -y httpd
          systemctl start httpd
          systemctl enable httpd
          echo "<h1>Sydeny Web Server 2</h1>" > /var/www/html/index.html
      Tags:
        - Key : Name
          Value : !Sub "${ProjectName}-ec2-web2"


# Web Application Load Balancer
  WebAlbSg:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref Vpc
      GroupDescription: my-sg-alb
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      Tags:
        - Key : Name
          Value : !Sub "${ProjectName}-sg-alb"

  WebAlb:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      Name: my-web-alb
      SecurityGroups:
        - !Ref WebAlbSg
      Subnets:
        - !Ref PubSn1
        - !Ref PubSn2

  WebAlbTg:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: my-web-alb-tg
      Port: 80
      Protocol: HTTP
      HealthCheckPath: '/'
      HealthCheckIntervalSeconds: 20
      HealthyThresholdCount: 3
      UnhealthyThresholdCount: 3
      VpcId: !Ref Vpc
      TargetType: instance
      Targets:
        - Id: !Ref Web1
        - Id: !Ref Web2
      Tags:
        - Key : Name
          Value : !Sub "${ProjectName}-tg"

  WebAlbListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref WebAlbTg
      LoadBalancerArn: !Ref WebAlb
      Port: 80
      Protocol: HTTP
...